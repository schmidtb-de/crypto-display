{"version":3,"sources":["img/bitcoin.svg","img/ethereum.svg","img/litecoin.svg","components/Profit.js","components/CurrencyLogo.js","components/CryptoData.js","components/Coins.js","components/CryptoSum.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Profit","worthSum","invested","CurrencyLogo","currency","BitcoinLogo","EtherumLogo","LitecoinLogo","CryptoData","props","useState","worth","setWorth","coins","amount","exchange","Math","round","useEffect","fetch","then","res","json","data","rate","property","Number","document","getElementsByClassName","innerText","setProperty","style","color","src","alt","height","className","Coins","bitcoin","etherum","litecoin","CryptoSum","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,sKCApC,SAASC,EAAOC,EAAUC,GAC/B,OAAID,EAAWC,E,oDCGV,SAASC,EAAaC,GAC3B,MAAiB,QAAbA,EACKC,IACe,QAAbD,EACFE,IAEFC,ICyCMC,MA/Cf,SAAoBC,GAAQ,IAAD,EACCC,mBAAS,IADV,mBAClBC,EADkB,KACXC,EADW,OAEcH,EAAMI,MAArCT,EAFiB,EAEjBA,SAAUF,EAFO,EAEPA,SAAUY,EAFH,EAEGA,OAiB5B,SAASC,IACP,OAAOC,KAAKC,MAAMN,EAAQG,GAW5B,OAtBAI,qBAAU,WACRC,MAAM,2CAAD,OACwCf,EADxC,qDAGFgB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJX,EAASW,EAAKC,WAEjB,CAACpB,IAMJc,qBAAU,WACR,IAAMO,EACJC,OAAOC,SAASC,uBAAuB,aAAa,GAAGC,WACvDH,OAAOC,SAASC,uBAAuB,aAAa,GAAGC,WACvDH,OAAOC,SAASC,uBAAuB,aAAa,GAAGC,WACzDpB,EAAMqB,YAAYL,MAIlB,yBACEM,MACE/B,EAAOe,IAAYb,GAAY,CAAE8B,MAAO,SAAY,CAAEA,MAAO,QAG/D,gCACE,yBAAKC,IAAK9B,EAAaC,GAAW8B,IAAKhC,EAAUiC,OAAO,SAE1D,oCACE,0BAAMC,UAAU,aAAarB,KAD/B,YC5COsB,EAAQ,CACnBC,QAAS,CACPlC,SAAU,MACVF,SAAU,GACVY,OAAQ,WAEVyB,QAAS,CACPnC,SAAU,MACVF,SAAU,GACVY,OAAQ,mBAEV0B,SAAU,CACRpC,SAAU,MACVF,SAAU,GACVY,OAAQ,aCSG2B,MAnBf,SAAmBhC,GACjB,IAAMP,EACJmC,EAAMC,QAAQpC,SAAWmC,EAAME,QAAQrC,SAAWmC,EAAMG,SAAStC,SAEnE,OACE,4BAAQkC,UAAU,cAChB,wBACEL,MACE/B,EAAOS,EAAMgB,SAAUvB,GACnB,CAAE8B,MAAO,cACT,CAAEA,MAAO,QAGdvB,EAAMgB,SAAWvB,EAPpB,aCmBSwC,MAvBf,WAAgB,IAAD,EACmBhC,mBAAS,GAD5B,mBACNe,EADM,KACIK,EADJ,KAWb,OACE,yBAAKM,UAAU,OACb,kBAAC,EAAD,CAAWX,SAAUA,IACrB,iCACE,kBAAC,EAAD,CAAYZ,MAAOwB,EAAMC,QAASR,YAAaA,IAC/C,kBAAC,EAAD,CAAYjB,MAAOwB,EAAMG,SAAUV,YAAaA,IAChD,kBAAC,EAAD,CAAYjB,MAAOwB,EAAME,QAAST,YAAaA,OCXnCa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStB,SAASuB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.364293cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bitcoin.2e480f7d.svg\";","module.exports = __webpack_public_path__ + \"static/media/ethereum.2fec62be.svg\";","module.exports = __webpack_public_path__ + \"static/media/litecoin.b73f76ac.svg\";","export function Profit(worthSum, invested) {\r\n  if (worthSum > invested) {\r\n    return true;\r\n  } else return false;\r\n}\r\n","import BitcoinLogo from \"../img/bitcoin.svg\";\r\nimport EtherumLogo from \"../img/ethereum.svg\";\r\nimport LitecoinLogo from \"../img/litecoin.svg\";\r\n\r\nexport function CurrencyLogo(currency) {\r\n  if (currency === \"BTC\") {\r\n    return BitcoinLogo;\r\n  } else if (currency === \"ETH\") {\r\n    return EtherumLogo;\r\n  }\r\n  return LitecoinLogo;\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Profit } from \"./Profit\";\r\nimport { CurrencyLogo } from \"./CurrencyLogo\";\r\n\r\nfunction CryptoData(props) {\r\n  const [worth, setWorth] = useState(10);\r\n  const { currency, invested, amount } = props.coins;\r\n\r\n  /* KEYS:\r\n    CF8FB01A-5AD9-47C4-80F4-47E770FFB7C4\r\n    4565A4C3-E11E-4F68-8DB4-93577C246DF2\r\n    8AD620D8-61CE-4EFA-866D-071211C7ED9B\r\n    */\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://rest.coinapi.io/v1/exchangerate/${currency}/EUR?apikey=4565A4C3-E11E-4F68-8DB4-93577C246DF2`\r\n    )\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        setWorth(data.rate);\r\n      });\r\n  }, [currency]);\r\n\r\n  function exchange() {\r\n    return Math.round(worth * amount);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const property =\r\n      Number(document.getElementsByClassName(\"cryptoSum\")[0].innerText) +\r\n      Number(document.getElementsByClassName(\"cryptoSum\")[1].innerText) +\r\n      Number(document.getElementsByClassName(\"cryptoSum\")[2].innerText);\r\n    props.setProperty(property);\r\n  });\r\n\r\n  return (\r\n    <div\r\n      style={\r\n        Profit(exchange(), invested) ? { color: \"green\" } : { color: \"red\" }\r\n      }\r\n    >\r\n      <figure>\r\n        <img src={CurrencyLogo(currency)} alt={invested} height=\"100\" />\r\n      </figure>\r\n      <figcaption>\r\n        <span className=\"cryptoSum\">{exchange()}</span>€\r\n      </figcaption>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CryptoData;\r\n","export const Coins = {\r\n  bitcoin: {\r\n    currency: \"BTC\",\r\n    invested: 50,\r\n    amount: 0.00693234\r\n  },\r\n  etherum: {\r\n    currency: \"ETH\",\r\n    invested: 50,\r\n    amount: 0.444574165760690447\r\n  },\r\n  litecoin: {\r\n    currency: \"LTC\",\r\n    invested: 50,\r\n    amount: 1.19721654\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { Profit } from \"./Profit\";\r\nimport { Coins } from \"./Coins\";\r\n\r\nfunction CryptoSum(props) {\r\n  const invested =\r\n    Coins.bitcoin.invested + Coins.etherum.invested + Coins.litecoin.invested;\r\n\r\n  return (\r\n    <header className=\"App-header\">\r\n      <h1\r\n        style={\r\n          Profit(props.property, invested)\r\n            ? { color: \"lightGreen\" }\r\n            : { color: \"red\" }\r\n        }\r\n      >\r\n        {props.property - invested} €\r\n      </h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default CryptoSum;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport CryptoData from \"./components/CryptoData\";\nimport { Coins } from \"./components/Coins\";\nimport CryptoSum from \"./components/CryptoSum\";\n\nfunction App() {\n  const [property, setProperty] = useState(0);\n\n  /*   useEffect(() => {\n    const property =\n      Number(document.getElementsByClassName(\"cryptoSum\")[0].innerText) +\n      Number(document.getElementsByClassName(\"cryptoSum\")[1].innerText) +\n      Number(document.getElementsByClassName(\"cryptoSum\")[2].innerText);\n    setProperty(property);\n  }, []); */\n\n  return (\n    <div className=\"App\">\n      <CryptoSum property={property} />\n      <content>\n        <CryptoData coins={Coins.bitcoin} setProperty={setProperty} />\n        <CryptoData coins={Coins.litecoin} setProperty={setProperty} />\n        <CryptoData coins={Coins.etherum} setProperty={setProperty} />\n      </content>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}